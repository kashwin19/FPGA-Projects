module debounce(
    input wire clk,
    input wire btn_in,
    output reg btn_out
);
    reg [19:0] counter;
    reg btn_sync;
    
    always @(posedge clk) begin
        // Synchronize button input to clock domain
        btn_sync <= btn_in;
        
        if (btn_out != btn_sync) begin
            // Button state changed, start counting
            counter <= counter + 1;
            if (&counter) begin  // If counter reaches max value
                btn_out <= btn_sync;
                counter <= 0;
            end
        end else begin
            counter <= 0;
        end
    end
endmodule


module single_port_ram #(parameter DATA_WIDTH = 8,
                         parameter ADDR_WIDTH =4
    )
    
  (  input wire clk,
    input wire we,
    input wire [ADDR_WIDTH-1:0]addr,
    input wire [DATA_WIDTH-1:0]data_in,
    output reg [DATA_WIDTH-1:0]data_out);
    
    reg [DATA_WIDTH-1:0]ram[1<<ADDR_WIDTH:0];
    
    always@(posedge clk)begin
    if(we)begin
    ram[addr]<=data_in;
    data_out <= data_in;
    end else begin
    data_out <= ram[addr];
    end
    end
    
    
endmodule


module seven_seg_driver(
    input wire clk,
    input wire [15:0] data,
    output reg [3:0] an,
    output reg [6:0] seg
);
    reg [1:0] digit_sel;
    reg [19:0] counter;
    
    always @(posedge clk) begin
        counter <= counter + 1;
        if (&counter) digit_sel <= digit_sel + 1;
    end
    
    always @(*) begin
        case (digit_sel)
            2'b00: begin an = 4'b1110; seg = hex_to_seg(data[3:0]); end
            2'b01: begin an = 4'b1101; seg = hex_to_seg(data[7:4]); end
            2'b10: begin an = 4'b1011; seg = hex_to_seg(data[11:8]); end
            2'b11: begin an = 4'b0111; seg = hex_to_seg(data[15:12]); end
        endcase
    end
    
    function [6:0] hex_to_seg;
        input [3:0] hex;
        begin
            case (hex)
                4'h0: hex_to_seg = 7'b1000000;
                4'h1: hex_to_seg = 7'b1111001;
                4'h2: hex_to_seg = 7'b0100100;
                4'h3: hex_to_seg = 7'b0110000;
                4'h4: hex_to_seg = 7'b0011001;
                4'h5: hex_to_seg = 7'b0010010;
                4'h6: hex_to_seg = 7'b0000010;
                4'h7: hex_to_seg = 7'b1111000;
                4'h8: hex_to_seg = 7'b0000000;
                4'h9: hex_to_seg = 7'b0010000;
                4'hA: hex_to_seg = 7'b0001000;
                4'hB: hex_to_seg = 7'b0000011;
                4'hC: hex_to_seg = 7'b1000110;
                4'hD: hex_to_seg = 7'b0100001;
                4'hE: hex_to_seg = 7'b0000110;
                4'hF: hex_to_seg = 7'b0001110;
                default: hex_to_seg = 7'b1111111;
            endcase
        end
    endfunction
endmodule


module top_ram_test(
    input wire clk,          // 100MHz clock
    input wire [11:4] sw,   // SW11-SW4 for 8-bit data input
    input wire [3:0] addr_sw, // SW3-SW0 for 4-bit address
    input wire BTNC,        // Center button for write
    output wire [7:0] led,  // LEDs for data output
    output wire [3:0] an,   // 7-segment anodes
    output wire [6:0] seg   // 7-segment segments
);

    // ==========================================
    // Debounce Instantiation
    // ==========================================
    wire write_enable;
    debounce debounce_inst (
        .clk(clk),
        .btn_in(BTNC),
        .btn_out(write_enable)
    );
    
    // Edge detection for single-cycle write pulse
    reg write_enable_prev;
    always @(posedge clk) write_enable_prev <= write_enable;
    wire write_pulse = write_enable && !write_enable_prev;

    // ==========================================
    // RAM Instantiation
    // ==========================================
    wire [7:0] data_out;
    single_port_ram #(
        .DATA_WIDTH(8),
        .ADDR_WIDTH(4)
    ) ram_inst (
        .clk(clk),
        .we(write_pulse),
        .addr(addr_sw),     // Address from SW3-SW0
        .data_in(sw[11:4]), // Data from SW11-SW4
        .data_out(data_out)
    );
    
    assign led = data_out;  

   
    wire [15:0] display_data = {data_out[3:0], 4'h0, addr_sw};
    
    seven_seg_driver display_driver(
        .clk(clk),
        .data(display_data),
        .an(an),
        .seg(seg)
    );

endmodule
